{
  "title": "ObservableArray",
  "hierarchy": [
    [
      {
        "text": "Observable",
        "link": "/api/class/Observable"
      }
    ],
    [
      {
        "text": "ObservableArray"
      }
    ]
  ],
  "summary": [
    {
      "title": "Constructors",
      "items": [
        1163
      ]
    },
    {
      "title": "Properties",
      "items": [
        1121,
        1122
      ]
    },
    {
      "title": "Accessors",
      "items": [
        1183
      ]
    },
    {
      "title": "Methods",
      "items": [
        1398,
        1403,
        1204,
        1340,
        1370,
        1155,
        1193,
        1259,
        1296,
        1229,
        1238,
        1277,
        1343,
        1176,
        1395,
        1247,
        1251,
        1196,
        1255,
        1286,
        1386,
        1390,
        1362,
        1139,
        1325,
        1123,
        1354,
        1131,
        1199,
        1201,
        1305,
        1315,
        1378,
        1147,
        1206,
        1346,
        1179,
        1350,
        1208,
        1210,
        1268,
        1214,
        1221,
        1187,
        1191,
        1189,
        1226
      ]
    }
  ],
  "reflections": {
    "1121": {
      "name": "changeEvent",
      "type": "Property",
      "url": "/api/class/ObservableArray#changeevent",
      "comment": {
        "summary": [
          {
            "kind": "text",
            "text": "String value used when hooking to change event."
          }
        ]
      },
      "flags": {
        "isStatic": true
      },
      "signatures": [
        {
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">changeEvent</span><span style=\"color: #E1E4E8\">: string</span></span></code>",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 37,
              "character": 11
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "String value used when hooking to change event."
              }
            ]
          },
          "url": "/api/class/ObservableArray#changeevent"
        }
      ]
    },
    "1122": {
      "name": "propertyChangeEvent",
      "type": "Property",
      "url": "/api/class/ObservableArray#propertychangeevent",
      "comment": {
        "summary": [
          {
            "kind": "text",
            "text": "String value used when hooking to propertyChange event."
          }
        ]
      },
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "propertyChangeEvent",
        "url": "/api/class/Observable#propertychangeevent",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">propertyChangeEvent</span><span style=\"color: #E1E4E8\">: string</span></span></code>",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 74,
              "character": 11
            }
          ],
          "inheritedFrom": {
            "name": "propertyChangeEvent",
            "url": "/api/class/Observable#propertychangeevent",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "String value used when hooking to propertyChange event."
              }
            ]
          },
          "url": "/api/class/ObservableArray#propertychangeevent"
        }
      ]
    },
    "1123": {
      "name": "on",
      "type": "Method",
      "url": "/api/class/ObservableArray#on-3",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "on",
        "url": "/api/class/Observable#on-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "on(eventName: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#on-3-on-4",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 125,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "on",
            "url": "/api/class/Observable#on-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {}
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1131": {
      "name": "once",
      "type": "Method",
      "url": "/api/class/ObservableArray#once-2",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "once",
        "url": "/api/class/Observable#once-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "once(eventName: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#once-2-once-3",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 126,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "once",
            "url": "/api/class/Observable#once-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {}
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1139": {
      "name": "off",
      "type": "Method",
      "url": "/api/class/ObservableArray#off-2",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "off",
        "url": "/api/class/Observable#off-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "off(eventName: string, callback?: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#off-2-off-3",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 127,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "off",
            "url": "/api/class/Observable#off-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {
                "isOptional": true
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1147": {
      "name": "removeEventListener",
      "type": "Method",
      "url": "/api/class/ObservableArray#removeeventlistener-2",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "removeEventListener",
        "url": "/api/class/Observable#removeeventlistener-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "removeEventListener(eventName: string, callback?: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#removeeventlistener-2-removeeventlistener-3",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 128,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "removeEventListener",
            "url": "/api/class/Observable#removeeventlistener-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {
                "isOptional": true
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1155": {
      "name": "addEventListener",
      "type": "Method",
      "url": "/api/class/ObservableArray#addeventlistener-2",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "addEventListener",
        "url": "/api/class/Observable#addeventlistener-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "addEventListener(eventName: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#addeventlistener-2-addeventlistener-3",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 129,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "addEventListener",
            "url": "/api/class/Observable#addeventlistener-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {}
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1163": {
      "name": "constructor",
      "type": "Constructor",
      "url": "/api/class/ObservableArray#constructor",
      "flags": {},
      "signatures": [
        {
          "type": "ConstructorSignature",
          "code": "new ObservableArray&lt;T&gt;(arrayLength?: number): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#constructor-new-observablearray",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 44,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Create ObservableArray<T> with specified length."
              }
            ]
          },
          "parameters": [
            {
              "name": "arrayLength",
              "type": "number",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        },
        {
          "type": "ConstructorSignature",
          "code": "new ObservableArray&lt;T&gt;(items: T[]): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#constructor-new-observablearray-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 48,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Create ObservableArray<T> from source Array<T>."
              }
            ]
          },
          "parameters": [
            {
              "name": "items",
              "type": "T[]",
              "flags": {}
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        },
        {
          "type": "ConstructorSignature",
          "code": "new ObservableArray&lt;T&gt;(...items: T[]): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#constructor-new-observablearray-2",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 52,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Create ObservableArray<T> from T items."
              }
            ]
          },
          "parameters": [
            {
              "name": "items",
              "type": "T[]",
              "flags": {
                "isRest": true
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1176": {
      "name": "getItem",
      "type": "Method",
      "url": "/api/class/ObservableArray#getitem",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">getItem</span><span style=\"color: #E1E4E8\">(pos: number): </span><span style=\"color: #79B8FF\">T</span></span></code>",
          "url": "/api/class/ObservableArray#getitem-getitem-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 58,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns item at specified position.\nSupports relative indexing from the end of the array when passed a negative index."
              }
            ]
          },
          "parameters": [
            {
              "name": "pos",
              "type": "number",
              "flags": {}
            }
          ],
          "returns": "T"
        }
      ]
    },
    "1179": {
      "name": "setItem",
      "type": "Method",
      "url": "/api/class/ObservableArray#setitem",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">setItem</span><span style=\"color: #E1E4E8\">(pos: number, value: </span><span style=\"color: #79B8FF\">T</span><span style=\"color: #E1E4E8\">): </span><span style=\"color: #F97583\">void</span></span></code>",
          "url": "/api/class/ObservableArray#setitem-setitem-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 63,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets item at specified position.\nSupports relative indexing from the end of the array when passed a negative index."
              }
            ]
          },
          "parameters": [
            {
              "name": "pos",
              "type": "number",
              "flags": {}
            },
            {
              "name": "value",
              "type": "T",
              "flags": {}
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1183": {
      "name": "length",
      "type": "Accessor",
      "url": "/api/class/ObservableArray#length",
      "flags": {},
      "signatures": [
        {
          "type": "GetSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #E1E4E8\">get </span><span style=\"color: #B392F0\">length</span><span style=\"color: #E1E4E8\">(): number</span></span></code>",
          "url": "/api/class/ObservableArray#length-length-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 67,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array."
              }
            ]
          },
          "parameters": [],
          "returns": "number"
        }
      ]
    },
    "1187": {
      "name": "toJSON",
      "type": "Method",
      "url": "/api/class/ObservableArray#tojson",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">toJSON</span><span style=\"color: #E1E4E8\">(): any[]</span></span></code>",
          "url": "/api/class/ObservableArray#tojson-tojson-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 69,
              "character": 4
            }
          ],
          "parameters": [],
          "returns": "any[]"
        }
      ]
    },
    "1189": {
      "name": "toString",
      "type": "Method",
      "url": "/api/class/ObservableArray#tostring",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">toString</span><span style=\"color: #E1E4E8\">(): string</span></span></code>",
          "url": "/api/class/ObservableArray#tostring-tostring-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 73,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a string representation of an array."
              }
            ]
          },
          "parameters": [],
          "returns": "string"
        }
      ]
    },
    "1191": {
      "name": "toLocaleString",
      "type": "Method",
      "url": "/api/class/ObservableArray#tolocalestring",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">toLocaleString</span><span style=\"color: #E1E4E8\">(): string</span></span></code>",
          "url": "/api/class/ObservableArray#tolocalestring-tolocalestring-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 74,
              "character": 4
            }
          ],
          "parameters": [],
          "returns": "string"
        }
      ]
    },
    "1193": {
      "name": "concat",
      "type": "Method",
      "url": "/api/class/ObservableArray#concat",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "concat(...args: any[]): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#concat-concat-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 79,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Combines two or more arrays."
              }
            ]
          },
          "parameters": [
            {
              "name": "args",
              "type": "any[]",
              "flags": {
                "isRest": true
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1196": {
      "name": "join",
      "type": "Method",
      "url": "/api/class/ObservableArray#join",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">join</span><span style=\"color: #E1E4E8\">(separator</span><span style=\"color: #F97583\">?:</span><span style=\"color: #E1E4E8\"> string): string</span></span></code>",
          "url": "/api/class/ObservableArray#join-join-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 84,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds all the elements of an array separated by the specified separator string."
              }
            ]
          },
          "parameters": [
            {
              "name": "separator",
              "type": "string",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma."
                  }
                ]
              }
            }
          ],
          "returns": "string"
        }
      ]
    },
    "1199": {
      "name": "pop",
      "type": "Method",
      "url": "/api/class/ObservableArray#pop",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">pop</span><span style=\"color: #E1E4E8\">(): </span><span style=\"color: #79B8FF\">T</span></span></code>",
          "url": "/api/class/ObservableArray#pop-pop-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 88,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes the last element from an array and returns it."
              }
            ]
          },
          "parameters": [],
          "returns": "T"
        }
      ]
    },
    "1201": {
      "name": "push",
      "type": "Method",
      "url": "/api/class/ObservableArray#push",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">push</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #F97583\">...</span><span style=\"color: #E1E4E8\">args: </span><span style=\"color: #79B8FF\">T</span><span style=\"color: #E1E4E8\">[]): number</span></span></code>",
          "url": "/api/class/ObservableArray#push-push-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 93,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Appends new elements to an array, and returns the new length of the array."
              }
            ]
          },
          "parameters": [
            {
              "name": "args",
              "type": "T[]",
              "flags": {
                "isRest": true
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1204": {
      "name": "_notifyLengthChange",
      "type": "Method",
      "url": "/api/class/ObservableArray#notifylengthchange",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">_notifyLengthChange</span><span style=\"color: #E1E4E8\">(): </span><span style=\"color: #F97583\">void</span></span></code>",
          "url": "/api/class/ObservableArray#notifylengthchange-notifylengthchange-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 94,
              "character": 4
            }
          ],
          "parameters": [],
          "returns": "void"
        }
      ]
    },
    "1206": {
      "name": "reverse",
      "type": "Method",
      "url": "/api/class/ObservableArray#reverse",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "reverse(): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#reverse-reverse-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 99,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Reverses the elements in an Array.\nThis method uses 'in place' algorithm."
              }
            ]
          },
          "parameters": [],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1208": {
      "name": "shift",
      "type": "Method",
      "url": "/api/class/ObservableArray#shift",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">shift</span><span style=\"color: #E1E4E8\">(): </span><span style=\"color: #79B8FF\">T</span></span></code>",
          "url": "/api/class/ObservableArray#shift-shift-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 103,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes the first element from an array and returns it."
              }
            ]
          },
          "parameters": [],
          "returns": "T"
        }
      ]
    },
    "1210": {
      "name": "slice",
      "type": "Method",
      "url": "/api/class/ObservableArray#slice",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "slice(start?: number, end?: number): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#slice-slice-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 109,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a section of an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "start",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The beginning of the specified portion of the array."
                  }
                ]
              }
            },
            {
              "name": "end",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The end of the specified portion of the array."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1214": {
      "name": "sort",
      "type": "Method",
      "url": "/api/class/ObservableArray#sort",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "sort(compareFn?: (a: T, b: T) => number): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#sort-sort-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 115,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts an array.\nThis method uses 'in place' algorithm."
              }
            ]
          },
          "parameters": [
            {
              "name": "compareFn",
              "type": "(a: T, b: T) => number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1221": {
      "name": "splice",
      "type": "Method",
      "url": "/api/class/ObservableArray#splice",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "splice(start: number, deleteCount?: number, ...items: T[]): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#splice-splice-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 123,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nThis method uses 'in place' algorithm."
              }
            ]
          },
          "parameters": [
            {
              "name": "start",
              "type": "number",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The zero-based location in the array from which to start removing elements."
                  }
                ]
              }
            },
            {
              "name": "deleteCount",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to remove."
                  }
                ]
              }
            },
            {
              "name": "items",
              "type": "T[]",
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Elements to insert into the array in place of the deleted elements."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1226": {
      "name": "unshift",
      "type": "Method",
      "url": "/api/class/ObservableArray#unshift",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">unshift</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #F97583\">...</span><span style=\"color: #E1E4E8\">args: </span><span style=\"color: #79B8FF\">T</span><span style=\"color: #E1E4E8\">[]): number</span></span></code>",
          "url": "/api/class/ObservableArray#unshift-unshift-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 128,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Inserts new elements at the start of an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "args",
              "type": "T[]",
              "flags": {
                "isRest": true
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1229": {
      "name": "find",
      "type": "Method",
      "url": "/api/class/ObservableArray#find",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "find(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => any, thisArg?: any): T",
          "url": "/api/class/ObservableArray#find-find-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 134,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first element in the array where predicate is true, and null otherwise."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => any",
              "flags": {},
              "comment": {
                "summary": []
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "If provided, it will be used as the this value for each invocation of predicate. If it is not provided, undefined is used instead."
                  }
                ]
              }
            }
          ],
          "returns": "T"
        }
      ]
    },
    "1238": {
      "name": "findIndex",
      "type": "Method",
      "url": "/api/class/ObservableArray#findindex",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "findIndex(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => any, thisArg?: any): number",
          "url": "/api/class/ObservableArray#findindex-findindex-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 140,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the first element in the array where predicate is true, and -1 otherwise."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => any",
              "flags": {},
              "comment": {
                "summary": []
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "If provided, it will be used as the this value for each invocation of predicate. If it is not provided, undefined is used instead."
                  }
                ]
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1247": {
      "name": "includes",
      "type": "Method",
      "url": "/api/class/ObservableArray#includes",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">includes</span><span style=\"color: #E1E4E8\">(searchElement: </span><span style=\"color: #79B8FF\">T</span><span style=\"color: #E1E4E8\">, fromIndex</span><span style=\"color: #F97583\">?:</span><span style=\"color: #E1E4E8\"> number): boolean</span></span></code>",
          "url": "/api/class/ObservableArray#includes-includes-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 146,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether the specified element exists inside the array."
              }
            ]
          },
          "parameters": [
            {
              "name": "searchElement",
              "type": "T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to locate in the array."
                  }
                ]
              }
            },
            {
              "name": "fromIndex",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
                  }
                ]
              }
            }
          ],
          "returns": "boolean"
        }
      ]
    },
    "1251": {
      "name": "indexOf",
      "type": "Method",
      "url": "/api/class/ObservableArray#indexof",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">indexOf</span><span style=\"color: #E1E4E8\">(searchElement: </span><span style=\"color: #79B8FF\">T</span><span style=\"color: #E1E4E8\">, fromIndex</span><span style=\"color: #F97583\">?:</span><span style=\"color: #E1E4E8\"> number): number</span></span></code>",
          "url": "/api/class/ObservableArray#indexof-indexof-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 152,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the first occurrence of a value in an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "searchElement",
              "type": "T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to locate in the array."
                  }
                ]
              }
            },
            {
              "name": "fromIndex",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
                  }
                ]
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1255": {
      "name": "lastIndexOf",
      "type": "Method",
      "url": "/api/class/ObservableArray#lastindexof",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">lastIndexOf</span><span style=\"color: #E1E4E8\">(searchElement: </span><span style=\"color: #79B8FF\">T</span><span style=\"color: #E1E4E8\">, fromIndex</span><span style=\"color: #F97583\">?:</span><span style=\"color: #E1E4E8\"> number): number</span></span></code>",
          "url": "/api/class/ObservableArray#lastindexof-lastindexof-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 158,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the last occurrence of a specified value in an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "searchElement",
              "type": "T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to locate in the array."
                  }
                ]
              }
            },
            {
              "name": "fromIndex",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array."
                  }
                ]
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1259": {
      "name": "every",
      "type": "Method",
      "url": "/api/class/ObservableArray#every",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "every(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean, thisArg?: any): boolean",
          "url": "/api/class/ObservableArray#every-every-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 164,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether all the members of an array satisfy the specified test."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "boolean"
        }
      ]
    },
    "1268": {
      "name": "some",
      "type": "Method",
      "url": "/api/class/ObservableArray#some",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "some(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean, thisArg?: any): boolean",
          "url": "/api/class/ObservableArray#some-some-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 170,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether the specified callback function returns true for any element of an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "boolean"
        }
      ]
    },
    "1277": {
      "name": "forEach",
      "type": "Method",
      "url": "/api/class/ObservableArray#foreach",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "forEach(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#foreach-foreach-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 176,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs the specified action for each element in an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => void",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1286": {
      "name": "map",
      "type": "Method",
      "url": "/api/class/ObservableArray#map",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "map&lt;U&gt;(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => U, thisArg?: any): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;U&gt;",
          "url": "/api/class/ObservableArray#map-map-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 182,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => U",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;U&gt;"
        }
      ]
    },
    "1296": {
      "name": "filter",
      "type": "Method",
      "url": "/api/class/ObservableArray#filter",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "filter(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean, thisArg?: any): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#filter-filter-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 188,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the elements of an array that meet the condition specified in a callback function."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1305": {
      "name": "reduce",
      "type": "Method",
      "url": "/api/class/ObservableArray#reduce",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => T, initialValue?: T): T",
          "url": "/api/class/ObservableArray#reduce-reduce-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 194,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(previousValue: T, currentValue: T, currentIndex: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "initialValue",
              "type": "T",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                  }
                ]
              }
            }
          ],
          "returns": "T"
        }
      ]
    },
    "1315": {
      "name": "reduceRight",
      "type": "Method",
      "url": "/api/class/ObservableArray#reduceright",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => T, initialValue?: T): T",
          "url": "/api/class/ObservableArray#reduceright-reduceright-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 200,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(previousValue: T, currentValue: T, currentIndex: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "initialValue",
              "type": "T",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                  }
                ]
              }
            }
          ],
          "returns": "T"
        }
      ]
    },
    "1325": {
      "name": "on",
      "type": "Method",
      "url": "/api/class/ObservableArray#on",
      "flags": {},
      "inheritedFrom": {
        "name": "on",
        "url": "/api/class/Observable#on",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "on(eventNames: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#on-on-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 209,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "on",
            "url": "/api/class/Observable#on",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A basic method signature to hook an event listener (shortcut alias to the addEventListener method)."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "String corresponding to events (e.g. \"propertyChange\"). Optionally could be used more events separated by "
                  },
                  {
                    "kind": "code",
                    "text": "`,`"
                  },
                  {
                    "kind": "text",
                    "text": " (e.g. \"propertyChange\", \"change\")."
                  }
                ]
              }
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Callback function which will be executed when event is raised."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter which will be used as "
                  },
                  {
                    "kind": "code",
                    "text": "`this`"
                  },
                  {
                    "kind": "text",
                    "text": " context for callback execution."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        },
        {
          "type": "CallSignature",
          "code": "on(event: \"change\", callback: (args: <a href=\"/api/interface/ChangedData\">ChangedData</a>&lt;T&gt;) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#on-on-2",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 210,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "fromName": "Observable"
          },
          "parameters": [
            {
              "name": "event",
              "type": "\"change\"",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "(args: <a href=\"/api/interface/ChangedData\">ChangedData</a>&lt;T&gt;) => void",
              "flags": {}
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1340": {
      "name": "[iterator]",
      "type": "Method",
      "url": "/api/class/ObservableArray#iterator",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #E1E4E8\">[iterator](): Generator</span><span style=\"color: #F97583\">&amp;</span><span style=\"color: #E1E4E8\">lt;</span><span style=\"color: #79B8FF\">T</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #F97583\">void</span><span style=\"color: #E1E4E8\">, unknown</span><span style=\"color: #F97583\">&amp;</span><span style=\"color: #E1E4E8\">gt;</span></span></code>",
          "url": "/api/class/ObservableArray#iterator-iterator-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 53,
              "character": 4
            }
          ],
          "parameters": [],
          "returns": "Generator&lt;T, void, unknown&gt;"
        }
      ]
    },
    "1343": {
      "name": "get",
      "type": "Method",
      "url": "/api/class/ObservableArray#get",
      "flags": {},
      "inheritedFrom": {
        "name": "get",
        "url": "/api/class/Observable#get",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(name: string): any</span></span></code>",
          "url": "/api/class/ObservableArray#get-get-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 84,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "get",
            "url": "/api/class/Observable#get",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value of the specified property."
              }
            ]
          },
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "flags": {}
            }
          ],
          "returns": "any"
        }
      ]
    },
    "1346": {
      "name": "set",
      "type": "Method",
      "url": "/api/class/ObservableArray#set",
      "flags": {},
      "inheritedFrom": {
        "name": "set",
        "url": "/api/class/Observable#set",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">set</span><span style=\"color: #E1E4E8\">(name: string, value: any): </span><span style=\"color: #F97583\">void</span></span></code>",
          "url": "/api/class/ObservableArray#set-set-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 88,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "set",
            "url": "/api/class/Observable#set",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Updates the specified property with the provided value."
              }
            ]
          },
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "flags": {}
            },
            {
              "name": "value",
              "type": "any",
              "flags": {}
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1350": {
      "name": "setProperty",
      "type": "Method",
      "url": "/api/class/ObservableArray#setproperty",
      "flags": {},
      "inheritedFrom": {
        "name": "setProperty",
        "url": "/api/class/Observable#setproperty",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">setProperty</span><span style=\"color: #E1E4E8\">(name: string, value: any): </span><span style=\"color: #F97583\">void</span></span></code>",
          "url": "/api/class/ObservableArray#setproperty-setproperty-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 92,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "setProperty",
            "url": "/api/class/Observable#setproperty",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Updates the specified property with the provided value and raises a property change event and a specific change event based on the property name."
              }
            ]
          },
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "flags": {}
            },
            {
              "name": "value",
              "type": "any",
              "flags": {}
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1354": {
      "name": "once",
      "type": "Method",
      "url": "/api/class/ObservableArray#once",
      "flags": {},
      "inheritedFrom": {
        "name": "once",
        "url": "/api/class/Observable#once",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "once(event: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#once-once-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 106,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "once",
            "url": "/api/class/Observable#once",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds one-time listener function for the event named "
              },
              {
                "kind": "code",
                "text": "`event`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ]
          },
          "parameters": [
            {
              "name": "event",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Name of the event to attach to."
                  }
                ]
              }
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to be called when the specified event is raised."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter which when set will be used as \"this\" in callback method call."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1362": {
      "name": "off",
      "type": "Method",
      "url": "/api/class/ObservableArray#off",
      "flags": {},
      "inheritedFrom": {
        "name": "off",
        "url": "/api/class/Observable#off",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "off(eventNames: string, callback?: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#off-off-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 110,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "off",
            "url": "/api/class/Observable#off",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Shortcut alias to the removeEventListener method."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {
                "isOptional": true
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1370": {
      "name": "addEventListener",
      "type": "Method",
      "url": "/api/class/ObservableArray#addeventlistener",
      "flags": {},
      "inheritedFrom": {
        "name": "addEventListener",
        "url": "/api/class/Observable#addeventlistener",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "addEventListener(eventNames: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#addeventlistener-addeventlistener-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 117,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "addEventListener",
            "url": "/api/class/Observable#addeventlistener",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds a listener for the specified event name."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Comma delimited names of the events to attach the listener to."
                  }
                ]
              }
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to be called when some of the specified event(s) is raised."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter which when set will be used as \"this\" in callback method call."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1378": {
      "name": "removeEventListener",
      "type": "Method",
      "url": "/api/class/ObservableArray#removeeventlistener",
      "flags": {},
      "inheritedFrom": {
        "name": "removeEventListener",
        "url": "/api/class/Observable#removeeventlistener",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "removeEventListener(eventNames: string, callback?: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#removeeventlistener-removeeventlistener-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 124,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "removeEventListener",
            "url": "/api/class/Observable#removeeventlistener",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes listener(s) for the specified event name."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Comma delimited names of the events the specified listener is associated with."
                  }
                ]
              }
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter pointing to a specific listener. If not defined, all listeners for the event names will be removed."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter which when set will be used to refine search of the correct callback which will be removed as event listener."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1386": {
      "name": "notify",
      "type": "Method",
      "url": "/api/class/ObservableArray#notify",
      "flags": {},
      "inheritedFrom": {
        "name": "notify",
        "url": "/api/class/Observable#notify",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #E1E4E8\">notify</span><span style=\"color: #F97583\">&amp;</span><span style=\"color: #E1E4E8\">lt;</span><span style=\"color: #79B8FF\">T</span><span style=\"color: #F97583\">&amp;</span><span style=\"color: #E1E4E8\">gt;(</span><span style=\"color: #FFAB70\">data</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">T</span><span style=\"color: #E1E4E8\">)</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">void</span></span></code>",
          "url": "/api/class/ObservableArray#notify-notify-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 140,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "notify",
            "url": "/api/class/Observable#notify",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Notify this Observable instance with some data. This causes all event\nhandlers on the Observable instance to be called, as well as any 'global'\nevent handlers set on the instance's class."
              }
            ]
          },
          "parameters": [
            {
              "name": "data",
              "type": "T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "an object that satisfies the EventData interface, though with\nan optional 'object' property. If left undefined, the 'object' property\nwill implicitly be set as this Observable instance."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1390": {
      "name": "notifyPropertyChange",
      "type": "Method",
      "url": "/api/class/ObservableArray#notifypropertychange",
      "flags": {},
      "inheritedFrom": {
        "name": "notifyPropertyChange",
        "url": "/api/class/Observable#notifypropertychange",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">notifyPropertyChange</span><span style=\"color: #E1E4E8\">(name: string, value: any, oldValue</span><span style=\"color: #F97583\">?:</span><span style=\"color: #E1E4E8\"> any): </span><span style=\"color: #F97583\">void</span></span></code>",
          "url": "/api/class/ObservableArray#notifypropertychange-notifypropertychange-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 145,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "notifyPropertyChange",
            "url": "/api/class/Observable#notifypropertychange",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Notifies all the registered listeners for the property change event."
              }
            ]
          },
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "flags": {}
            },
            {
              "name": "value",
              "type": "any",
              "flags": {}
            },
            {
              "name": "oldValue",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1395": {
      "name": "hasListeners",
      "type": "Method",
      "url": "/api/class/ObservableArray#haslisteners",
      "flags": {},
      "inheritedFrom": {
        "name": "hasListeners",
        "url": "/api/class/Observable#haslisteners",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">hasListeners</span><span style=\"color: #E1E4E8\">(eventName: string): boolean</span></span></code>",
          "url": "/api/class/ObservableArray#haslisteners-haslisteners-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 150,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "hasListeners",
            "url": "/api/class/Observable#haslisteners",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks whether a listener is registered for the specified event name."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The name of the event to check for."
                  }
                ]
              }
            }
          ],
          "returns": "boolean"
        }
      ]
    },
    "1398": {
      "name": "_createPropertyChangeData",
      "type": "Method",
      "url": "/api/class/ObservableArray#createpropertychangedata",
      "flags": {},
      "inheritedFrom": {
        "name": "_createPropertyChangeData",
        "url": "/api/class/Observable#createpropertychangedata",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "_createPropertyChangeData(propertyName: string, value: any, oldValue?: any): <a href=\"/api/interface/PropertyChangeData\">PropertyChangeData</a>",
          "url": "/api/class/ObservableArray#createpropertychangedata-createpropertychangedata-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 154,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "_createPropertyChangeData",
            "url": "/api/class/Observable#createpropertychangedata",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "This method is intended to be overriden by inheritors to provide additional implementation."
              }
            ]
          },
          "parameters": [
            {
              "name": "propertyName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "value",
              "type": "any",
              "flags": {}
            },
            {
              "name": "oldValue",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "<a href=\"/api/interface/PropertyChangeData\">PropertyChangeData</a>"
        }
      ]
    },
    "1403": {
      "name": "_emit",
      "type": "Method",
      "url": "/api/class/ObservableArray#emit",
      "flags": {},
      "inheritedFrom": {
        "name": "_emit",
        "url": "/api/class/Observable#emit",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "<code><span class=\"line\"><span style=\"color: #B392F0\">_emit</span><span style=\"color: #E1E4E8\">(eventNames: string): </span><span style=\"color: #F97583\">void</span></span></code>",
          "url": "/api/class/ObservableArray#emit-emit-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 155,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "_emit",
            "url": "/api/class/Observable#emit",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {}
            }
          ],
          "returns": "void"
        }
      ]
    }
  }
}