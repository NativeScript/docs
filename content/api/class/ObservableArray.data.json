{
  "title": "ObservableArray",
  "hierarchy": [
    [
      {
        "text": "Observable",
        "link": "/api/class/Observable"
      }
    ],
    [
      {
        "text": "ObservableArray"
      }
    ]
  ],
  "summary": [
    {
      "title": "Constructors",
      "items": [
        1401
      ]
    },
    {
      "title": "Properties",
      "items": [
        1412,
        1411,
        1413,
        1637,
        1374,
        1375
      ]
    },
    {
      "title": "Accessors",
      "items": [
        1421
      ]
    },
    {
      "title": "Methods",
      "items": [
        1632,
        1629,
        1442,
        1578,
        1593,
        1391,
        1431,
        1497,
        1534,
        1467,
        1476,
        1515,
        1614,
        1414,
        1626,
        1485,
        1489,
        1434,
        1493,
        1524,
        1617,
        1621,
        1588,
        1386,
        1563,
        1376,
        1580,
        1381,
        1437,
        1439,
        1543,
        1553,
        1601,
        1396,
        1444,
        1606,
        1417,
        1610,
        1446,
        1448,
        1506,
        1452,
        1459,
        1425,
        1429,
        1427,
        1464
      ]
    }
  ],
  "reflections": {
    "1374": {
      "name": "changeEvent",
      "type": "Property",
      "url": "/api/class/ObservableArray#changeevent",
      "comment": {
        "summary": [
          {
            "kind": "text",
            "text": "String value used when hooking to change event."
          }
        ]
      },
      "flags": {
        "isStatic": true
      },
      "signatures": [
        {
          "code": "changeEvent: string",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 37,
              "character": 11
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "String value used when hooking to change event."
              }
            ]
          },
          "url": "/api/class/ObservableArray#changeevent"
        }
      ]
    },
    "1375": {
      "name": "propertyChangeEvent",
      "type": "Property",
      "url": "/api/class/ObservableArray#propertychangeevent",
      "comment": {
        "summary": [
          {
            "kind": "text",
            "text": "String value used when hooking to propertyChange event."
          }
        ]
      },
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "propertyChangeEvent",
        "url": "/api/class/Observable#propertychangeevent",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "code": "propertyChangeEvent: string",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 81,
              "character": 8
            }
          ],
          "inheritedFrom": {
            "name": "propertyChangeEvent",
            "url": "/api/class/Observable#propertychangeevent",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "String value used when hooking to propertyChange event."
              }
            ]
          },
          "url": "/api/class/ObservableArray#propertychangeevent"
        }
      ]
    },
    "1376": {
      "name": "on",
      "type": "Method",
      "url": "/api/class/ObservableArray#on-3",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "on",
        "url": "/api/class/Observable#on-3",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "on(eventName: string, callback: any, thisArg?: any): void",
          "url": "/api/class/ObservableArray#on-3-on-4",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 91,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "on",
            "url": "/api/class/Observable#on-3",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "any",
              "flags": {}
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1381": {
      "name": "once",
      "type": "Method",
      "url": "/api/class/ObservableArray#once-2",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "once",
        "url": "/api/class/Observable#once-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "once(eventName: string, callback: any, thisArg?: any): void",
          "url": "/api/class/ObservableArray#once-2-once-3",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 106,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "once",
            "url": "/api/class/Observable#once-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "any",
              "flags": {}
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1386": {
      "name": "off",
      "type": "Method",
      "url": "/api/class/ObservableArray#off-2",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "off",
        "url": "/api/class/Observable#off-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "off(eventName: string, callback?: any, thisArg?: any): void",
          "url": "/api/class/ObservableArray#off-2-off-3",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 113,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "off",
            "url": "/api/class/Observable#off-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1391": {
      "name": "addEventListener",
      "type": "Method",
      "url": "/api/class/ObservableArray#addeventlistener-2",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "addEventListener",
        "url": "/api/class/Observable#addeventlistener-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "addEventListener(eventName: string, callback: any, thisArg?: any): void",
          "url": "/api/class/ObservableArray#addeventlistener-2-addeventlistener-3",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 123,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "addEventListener",
            "url": "/api/class/Observable#addeventlistener-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "any",
              "flags": {}
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1396": {
      "name": "removeEventListener",
      "type": "Method",
      "url": "/api/class/ObservableArray#removeeventlistener-2",
      "flags": {
        "isStatic": true
      },
      "inheritedFrom": {
        "name": "removeEventListener",
        "url": "/api/class/Observable#removeeventlistener-2",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "removeEventListener(eventName: string, callback?: any, thisArg?: any): void",
          "url": "/api/class/ObservableArray#removeeventlistener-2-removeeventlistener-3",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 133,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "removeEventListener",
            "url": "/api/class/Observable#removeeventlistener-2",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1401": {
      "name": "constructor",
      "type": "Constructor",
      "url": "/api/class/ObservableArray#constructor",
      "flags": {},
      "signatures": [
        {
          "type": "ConstructorSignature",
          "code": "new ObservableArray&lt;T&gt;(arrayLength?: number): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#constructor-new-observablearray",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 44,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Create ObservableArray<T> with specified length."
              }
            ]
          },
          "parameters": [
            {
              "name": "arrayLength",
              "type": "number",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        },
        {
          "type": "ConstructorSignature",
          "code": "new ObservableArray&lt;T&gt;(items: T[]): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#constructor-new-observablearray-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 48,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Create ObservableArray<T> from source Array<T>."
              }
            ]
          },
          "parameters": [
            {
              "name": "items",
              "type": "T[]",
              "flags": {}
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        },
        {
          "type": "ConstructorSignature",
          "code": "new ObservableArray&lt;T&gt;(...items: T[]): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#constructor-new-observablearray-2",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 52,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Create ObservableArray<T> from T items."
              }
            ]
          },
          "parameters": [
            {
              "name": "items",
              "type": "T[]",
              "flags": {
                "isRest": true
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1411": {
      "name": "_array",
      "type": "Property",
      "url": "/api/class/ObservableArray#array",
      "flags": {
        "isPrivate": true
      },
      "signatures": [
        {
          "code": "_array: any",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 38,
              "character": 12
            }
          ],
          "url": "/api/class/ObservableArray#array"
        }
      ]
    },
    "1412": {
      "name": "_addArgs",
      "type": "Property",
      "url": "/api/class/ObservableArray#addargs",
      "flags": {
        "isPrivate": true
      },
      "signatures": [
        {
          "code": "_addArgs: any",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 39,
              "character": 12
            }
          ],
          "url": "/api/class/ObservableArray#addargs"
        }
      ]
    },
    "1413": {
      "name": "_deleteArgs",
      "type": "Property",
      "url": "/api/class/ObservableArray#deleteargs",
      "flags": {
        "isPrivate": true
      },
      "signatures": [
        {
          "code": "_deleteArgs: any",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 40,
              "character": 12
            }
          ],
          "url": "/api/class/ObservableArray#deleteargs"
        }
      ]
    },
    "1414": {
      "name": "getItem",
      "type": "Method",
      "url": "/api/class/ObservableArray#getitem",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "getItem(pos: number): T",
          "url": "/api/class/ObservableArray#getitem-getitem-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 58,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns item at specified position.\nSupports relative indexing from the end of the array when passed a negative index."
              }
            ]
          },
          "parameters": [
            {
              "name": "pos",
              "type": "number",
              "flags": {}
            }
          ],
          "returns": "T"
        }
      ]
    },
    "1417": {
      "name": "setItem",
      "type": "Method",
      "url": "/api/class/ObservableArray#setitem",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "setItem(pos: number, value: T): void",
          "url": "/api/class/ObservableArray#setitem-setitem-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 63,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets item at specified position.\nSupports relative indexing from the end of the array when passed a negative index."
              }
            ]
          },
          "parameters": [
            {
              "name": "pos",
              "type": "number",
              "flags": {}
            },
            {
              "name": "value",
              "type": "T",
              "flags": {}
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1421": {
      "name": "length",
      "type": "Accessor",
      "url": "/api/class/ObservableArray#length",
      "flags": {},
      "signatures": [
        {
          "type": "GetSignature",
          "code": "get length(): number",
          "url": "/api/class/ObservableArray#length-length-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 67,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array."
              }
            ]
          },
          "parameters": [],
          "returns": "number"
        }
      ]
    },
    "1425": {
      "name": "toJSON",
      "type": "Method",
      "url": "/api/class/ObservableArray#tojson",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "toJSON(): any[]",
          "url": "/api/class/ObservableArray#tojson-tojson-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 69,
              "character": 4
            }
          ],
          "parameters": [],
          "returns": "any[]"
        }
      ]
    },
    "1427": {
      "name": "toString",
      "type": "Method",
      "url": "/api/class/ObservableArray#tostring",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "toString(): string",
          "url": "/api/class/ObservableArray#tostring-tostring-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 73,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a string representation of an array."
              }
            ]
          },
          "parameters": [],
          "returns": "string"
        }
      ]
    },
    "1429": {
      "name": "toLocaleString",
      "type": "Method",
      "url": "/api/class/ObservableArray#tolocalestring",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "toLocaleString(): string",
          "url": "/api/class/ObservableArray#tolocalestring-tolocalestring-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 74,
              "character": 4
            }
          ],
          "parameters": [],
          "returns": "string"
        }
      ]
    },
    "1431": {
      "name": "concat",
      "type": "Method",
      "url": "/api/class/ObservableArray#concat",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "concat(...args: any[]): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#concat-concat-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 79,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Combines two or more arrays."
              }
            ]
          },
          "parameters": [
            {
              "name": "args",
              "type": "any[]",
              "flags": {
                "isRest": true
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1434": {
      "name": "join",
      "type": "Method",
      "url": "/api/class/ObservableArray#join",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "join(separator?: string): string",
          "url": "/api/class/ObservableArray#join-join-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 84,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds all the elements of an array separated by the specified separator string."
              }
            ]
          },
          "parameters": [
            {
              "name": "separator",
              "type": "string",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma."
                  }
                ]
              }
            }
          ],
          "returns": "string"
        }
      ]
    },
    "1437": {
      "name": "pop",
      "type": "Method",
      "url": "/api/class/ObservableArray#pop",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "pop(): T",
          "url": "/api/class/ObservableArray#pop-pop-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 88,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes the last element from an array and returns it."
              }
            ]
          },
          "parameters": [],
          "returns": "T"
        }
      ]
    },
    "1439": {
      "name": "push",
      "type": "Method",
      "url": "/api/class/ObservableArray#push",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "push(...args: T[]): number",
          "url": "/api/class/ObservableArray#push-push-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 93,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Appends new elements to an array, and returns the new length of the array."
              }
            ]
          },
          "parameters": [
            {
              "name": "args",
              "type": "T[]",
              "flags": {
                "isRest": true
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1442": {
      "name": "_notifyLengthChange",
      "type": "Method",
      "url": "/api/class/ObservableArray#notifylengthchange",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "_notifyLengthChange(): void",
          "url": "/api/class/ObservableArray#notifylengthchange-notifylengthchange-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 94,
              "character": 4
            }
          ],
          "parameters": [],
          "returns": "void"
        }
      ]
    },
    "1444": {
      "name": "reverse",
      "type": "Method",
      "url": "/api/class/ObservableArray#reverse",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "reverse(): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#reverse-reverse-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 99,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Reverses the elements in an Array.\nThis method uses 'in place' algorithm."
              }
            ]
          },
          "parameters": [],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1446": {
      "name": "shift",
      "type": "Method",
      "url": "/api/class/ObservableArray#shift",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "shift(): T",
          "url": "/api/class/ObservableArray#shift-shift-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 103,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes the first element from an array and returns it."
              }
            ]
          },
          "parameters": [],
          "returns": "T"
        }
      ]
    },
    "1448": {
      "name": "slice",
      "type": "Method",
      "url": "/api/class/ObservableArray#slice",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "slice(start?: number, end?: number): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#slice-slice-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 109,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a section of an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "start",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The beginning of the specified portion of the array."
                  }
                ]
              }
            },
            {
              "name": "end",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The end of the specified portion of the array."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1452": {
      "name": "sort",
      "type": "Method",
      "url": "/api/class/ObservableArray#sort",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "sort(compareFn?: (a: T, b: T) => number): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#sort-sort-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 115,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts an array.\nThis method uses 'in place' algorithm."
              }
            ]
          },
          "parameters": [
            {
              "name": "compareFn",
              "type": "(a: T, b: T) => number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1459": {
      "name": "splice",
      "type": "Method",
      "url": "/api/class/ObservableArray#splice",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "splice(start: number, deleteCount?: number, ...items: T[]): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#splice-splice-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 123,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nThis method uses 'in place' algorithm."
              }
            ]
          },
          "parameters": [
            {
              "name": "start",
              "type": "number",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The zero-based location in the array from which to start removing elements."
                  }
                ]
              }
            },
            {
              "name": "deleteCount",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to remove."
                  }
                ]
              }
            },
            {
              "name": "items",
              "type": "T[]",
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Elements to insert into the array in place of the deleted elements."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1464": {
      "name": "unshift",
      "type": "Method",
      "url": "/api/class/ObservableArray#unshift",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "unshift(...args: T[]): number",
          "url": "/api/class/ObservableArray#unshift-unshift-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 128,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Inserts new elements at the start of an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "args",
              "type": "T[]",
              "flags": {
                "isRest": true
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1467": {
      "name": "find",
      "type": "Method",
      "url": "/api/class/ObservableArray#find",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "find(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => any, thisArg?: any): T",
          "url": "/api/class/ObservableArray#find-find-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 134,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first element in the array where predicate is true, and null otherwise."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => any",
              "flags": {},
              "comment": {
                "summary": []
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "If provided, it will be used as the this value for each invocation of predicate. If it is not provided, undefined is used instead."
                  }
                ]
              }
            }
          ],
          "returns": "T"
        }
      ]
    },
    "1476": {
      "name": "findIndex",
      "type": "Method",
      "url": "/api/class/ObservableArray#findindex",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "findIndex(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => any, thisArg?: any): number",
          "url": "/api/class/ObservableArray#findindex-findindex-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 140,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the first element in the array where predicate is true, and -1 otherwise."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => any",
              "flags": {},
              "comment": {
                "summary": []
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "If provided, it will be used as the this value for each invocation of predicate. If it is not provided, undefined is used instead."
                  }
                ]
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1485": {
      "name": "includes",
      "type": "Method",
      "url": "/api/class/ObservableArray#includes",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "includes(searchElement: T, fromIndex?: number): boolean",
          "url": "/api/class/ObservableArray#includes-includes-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 146,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether the specified element exists inside the array."
              }
            ]
          },
          "parameters": [
            {
              "name": "searchElement",
              "type": "T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to locate in the array."
                  }
                ]
              }
            },
            {
              "name": "fromIndex",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
                  }
                ]
              }
            }
          ],
          "returns": "boolean"
        }
      ]
    },
    "1489": {
      "name": "indexOf",
      "type": "Method",
      "url": "/api/class/ObservableArray#indexof",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "indexOf(searchElement: T, fromIndex?: number): number",
          "url": "/api/class/ObservableArray#indexof-indexof-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 152,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the first occurrence of a value in an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "searchElement",
              "type": "T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to locate in the array."
                  }
                ]
              }
            },
            {
              "name": "fromIndex",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
                  }
                ]
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1493": {
      "name": "lastIndexOf",
      "type": "Method",
      "url": "/api/class/ObservableArray#lastindexof",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "lastIndexOf(searchElement: T, fromIndex?: number): number",
          "url": "/api/class/ObservableArray#lastindexof-lastindexof-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 158,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the last occurrence of a specified value in an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "searchElement",
              "type": "T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to locate in the array."
                  }
                ]
              }
            },
            {
              "name": "fromIndex",
              "type": "number",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array."
                  }
                ]
              }
            }
          ],
          "returns": "number"
        }
      ]
    },
    "1497": {
      "name": "every",
      "type": "Method",
      "url": "/api/class/ObservableArray#every",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "every(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean, thisArg?: any): boolean",
          "url": "/api/class/ObservableArray#every-every-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 164,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether all the members of an array satisfy the specified test."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "boolean"
        }
      ]
    },
    "1506": {
      "name": "some",
      "type": "Method",
      "url": "/api/class/ObservableArray#some",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "some(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean, thisArg?: any): boolean",
          "url": "/api/class/ObservableArray#some-some-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 170,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether the specified callback function returns true for any element of an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "boolean"
        }
      ]
    },
    "1515": {
      "name": "forEach",
      "type": "Method",
      "url": "/api/class/ObservableArray#foreach",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "forEach(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#foreach-foreach-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 176,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs the specified action for each element in an array."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => void",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1524": {
      "name": "map",
      "type": "Method",
      "url": "/api/class/ObservableArray#map",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "map&lt;U&gt;(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => U, thisArg?: any): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;U&gt;",
          "url": "/api/class/ObservableArray#map-map-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 182,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => U",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;U&gt;"
        }
      ]
    },
    "1534": {
      "name": "filter",
      "type": "Method",
      "url": "/api/class/ObservableArray#filter",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "filter(callbackfn: (value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean, thisArg?: any): <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;",
          "url": "/api/class/ObservableArray#filter-filter-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 188,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the elements of an array that meet the condition specified in a callback function."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: T, index: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => boolean",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                  }
                ]
              }
            }
          ],
          "returns": "<a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;"
        }
      ]
    },
    "1543": {
      "name": "reduce",
      "type": "Method",
      "url": "/api/class/ObservableArray#reduce",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => T, initialValue?: T): T",
          "url": "/api/class/ObservableArray#reduce-reduce-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 194,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(previousValue: T, currentValue: T, currentIndex: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "initialValue",
              "type": "T",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                  }
                ]
              }
            }
          ],
          "returns": "T"
        }
      ]
    },
    "1553": {
      "name": "reduceRight",
      "type": "Method",
      "url": "/api/class/ObservableArray#reduceright",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => T, initialValue?: T): T",
          "url": "/api/class/ObservableArray#reduceright-reduceright-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 200,
              "character": 4
            }
          ],
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
              }
            ]
          },
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(previousValue: T, currentValue: T, currentIndex: number, array: <a href=\"/api/class/ObservableArray\">ObservableArray</a>&lt;T&gt;) => T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
                  }
                ]
              }
            },
            {
              "name": "initialValue",
              "type": "T",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                  }
                ]
              }
            }
          ],
          "returns": "T"
        }
      ]
    },
    "1563": {
      "name": "on",
      "type": "Method",
      "url": "/api/class/ObservableArray#on",
      "flags": {},
      "inheritedFrom": {
        "name": "on",
        "url": "/api/class/Observable#on",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "on(eventNames: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#on-on-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 209,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "on",
            "url": "/api/class/Observable#on",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A basic method signature to hook an event listener (shortcut alias to the addEventListener method)."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "String corresponding to events (e.g. \"propertyChange\"). Optionally could be used more events separated by "
                  },
                  {
                    "kind": "code",
                    "text": "`,`"
                  },
                  {
                    "kind": "text",
                    "text": " (e.g. \"propertyChange\", \"change\")."
                  }
                ]
              }
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Callback function which will be executed when event is raised."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter which will be used as "
                  },
                  {
                    "kind": "code",
                    "text": "`this`"
                  },
                  {
                    "kind": "text",
                    "text": " context for callback execution."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        },
        {
          "type": "CallSignature",
          "code": "on(event: \"change\", callback: (args: <a href=\"/api/interface/ChangedData\">ChangedData</a>&lt;T&gt;) => void, thisArg?: any): void",
          "url": "/api/class/ObservableArray#on-on-2",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 210,
              "character": 4
            }
          ],
          "inheritedFrom": {
            "name": "on",
            "url": "/api/class/Observable#on",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Raised when a propertyChange occurs."
              }
            ]
          },
          "parameters": [
            {
              "name": "event",
              "type": "\"change\"",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "(args: <a href=\"/api/interface/ChangedData\">ChangedData</a>&lt;T&gt;) => void",
              "flags": {}
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1578": {
      "name": "[iterator]",
      "type": "Method",
      "url": "/api/class/ObservableArray#iterator",
      "flags": {},
      "signatures": [
        {
          "type": "CallSignature",
          "code": "[iterator](): Generator&lt;T, void, unknown&gt;",
          "url": "/api/class/ObservableArray#iterator-iterator-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable-array/index.d.ts",
              "line": 53,
              "character": 4
            }
          ],
          "parameters": [],
          "returns": "Generator&lt;T, void, unknown&gt;"
        }
      ]
    },
    "1580": {
      "name": "once",
      "type": "Method",
      "url": "/api/class/ObservableArray#once",
      "flags": {},
      "inheritedFrom": {
        "name": "once",
        "url": "/api/class/Observable#once",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "once(event: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): any",
          "url": "/api/class/ObservableArray#once-once-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 104,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "once",
            "url": "/api/class/Observable#once",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds one-time listener function for the event named "
              },
              {
                "kind": "code",
                "text": "`event`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ]
          },
          "parameters": [
            {
              "name": "event",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Name of the event to attach to."
                  }
                ]
              }
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to be called when the specified event is raised."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter which when set will be used as \"this\" in callback method call."
                  }
                ]
              }
            }
          ],
          "returns": "any"
        }
      ]
    },
    "1588": {
      "name": "off",
      "type": "Method",
      "url": "/api/class/ObservableArray#off",
      "flags": {},
      "inheritedFrom": {
        "name": "off",
        "url": "/api/class/Observable#off",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "off(eventNames: string, callback?: any, thisArg?: any): any",
          "url": "/api/class/ObservableArray#off-off-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 111,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "off",
            "url": "/api/class/Observable#off",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Shortcut alias to the removeEventListener method."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {}
            },
            {
              "name": "callback",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "any"
        }
      ]
    },
    "1593": {
      "name": "addEventListener",
      "type": "Method",
      "url": "/api/class/ObservableArray#addeventlistener",
      "flags": {},
      "inheritedFrom": {
        "name": "addEventListener",
        "url": "/api/class/Observable#addeventlistener",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "addEventListener(eventNames: string, callback: (data: <a href=\"/api/interface/EventData\">EventData</a>) => void, thisArg?: any): any",
          "url": "/api/class/ObservableArray#addeventlistener-addeventlistener-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 121,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "addEventListener",
            "url": "/api/class/Observable#addeventlistener",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds a listener for the specified event name."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Comma delimited names of the events to attach the listener to."
                  }
                ]
              }
            },
            {
              "name": "callback",
              "type": "(data: <a href=\"/api/interface/EventData\">EventData</a>) => void",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to be called when some of the specified event(s) is raised."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter which when set will be used as \"this\" in callback method call."
                  }
                ]
              }
            }
          ],
          "returns": "any"
        }
      ]
    },
    "1601": {
      "name": "removeEventListener",
      "type": "Method",
      "url": "/api/class/ObservableArray#removeeventlistener",
      "flags": {},
      "inheritedFrom": {
        "name": "removeEventListener",
        "url": "/api/class/Observable#removeeventlistener",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "removeEventListener(eventNames: string, callback?: any, thisArg?: any): any",
          "url": "/api/class/ObservableArray#removeeventlistener-removeeventlistener-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 131,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "removeEventListener",
            "url": "/api/class/Observable#removeeventlistener",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes listener(s) for the specified event name."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Comma delimited names of the events the specified listener is associated with."
                  }
                ]
              }
            },
            {
              "name": "callback",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter pointing to a specific listener. If not defined, all listeners for the event names will be removed."
                  }
                ]
              }
            },
            {
              "name": "thisArg",
              "type": "any",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional parameter which when set will be used to refine search of the correct callback which will be removed as event listener."
                  }
                ]
              }
            }
          ],
          "returns": "any"
        }
      ]
    },
    "1606": {
      "name": "set",
      "type": "Method",
      "url": "/api/class/ObservableArray#set",
      "flags": {},
      "inheritedFrom": {
        "name": "set",
        "url": "/api/class/Observable#set",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "set(name: string, value: any): void",
          "url": "/api/class/ObservableArray#set-set-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 138,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "set",
            "url": "/api/class/Observable#set",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Updates the specified property with the provided value."
              }
            ]
          },
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "flags": {}
            },
            {
              "name": "value",
              "type": "any",
              "flags": {}
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1610": {
      "name": "setProperty",
      "type": "Method",
      "url": "/api/class/ObservableArray#setproperty",
      "flags": {},
      "inheritedFrom": {
        "name": "setProperty",
        "url": "/api/class/Observable#setproperty",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "setProperty(name: string, value: any): void",
          "url": "/api/class/ObservableArray#setproperty-setproperty-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 143,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "setProperty",
            "url": "/api/class/Observable#setproperty",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Updates the specified property with the provided value and raises a property change event and a specific change event based on the property name."
              }
            ]
          },
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "flags": {}
            },
            {
              "name": "value",
              "type": "any",
              "flags": {}
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1614": {
      "name": "get",
      "type": "Method",
      "url": "/api/class/ObservableArray#get",
      "flags": {},
      "inheritedFrom": {
        "name": "get",
        "url": "/api/class/Observable#get",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "get(name: string): any",
          "url": "/api/class/ObservableArray#get-get-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 148,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "get",
            "url": "/api/class/Observable#get",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value of the specified property."
              }
            ]
          },
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "flags": {}
            }
          ],
          "returns": "any"
        }
      ]
    },
    "1617": {
      "name": "notify",
      "type": "Method",
      "url": "/api/class/ObservableArray#notify",
      "flags": {},
      "inheritedFrom": {
        "name": "notify",
        "url": "/api/class/Observable#notify",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "notify&lt;T&gt;(data: T): void",
          "url": "/api/class/ObservableArray#notify-notify-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 154,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "notify",
            "url": "/api/class/Observable#notify",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Notifies all the registered listeners for the event provided in the data.eventName."
              }
            ]
          },
          "parameters": [
            {
              "name": "data",
              "type": "T",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The data associated with the event."
                  }
                ]
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1621": {
      "name": "notifyPropertyChange",
      "type": "Method",
      "url": "/api/class/ObservableArray#notifypropertychange",
      "flags": {},
      "inheritedFrom": {
        "name": "notifyPropertyChange",
        "url": "/api/class/Observable#notifypropertychange",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "notifyPropertyChange(propertyName: string, value: any, oldValue?: any): void",
          "url": "/api/class/ObservableArray#notifypropertychange-notifypropertychange-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 159,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "notifyPropertyChange",
            "url": "/api/class/Observable#notifypropertychange",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Notifies all the registered listeners for the property change event."
              }
            ]
          },
          "parameters": [
            {
              "name": "propertyName",
              "type": "string",
              "flags": {}
            },
            {
              "name": "value",
              "type": "any",
              "flags": {}
            },
            {
              "name": "oldValue",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "void"
        }
      ]
    },
    "1626": {
      "name": "hasListeners",
      "type": "Method",
      "url": "/api/class/ObservableArray#haslisteners",
      "flags": {},
      "inheritedFrom": {
        "name": "hasListeners",
        "url": "/api/class/Observable#haslisteners",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "hasListeners(eventName: string): boolean",
          "url": "/api/class/ObservableArray#haslisteners-haslisteners-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 165,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "hasListeners",
            "url": "/api/class/Observable#haslisteners",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks whether a listener is registered for the specified event name."
              }
            ]
          },
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The name of the event to check for."
                  }
                ]
              }
            }
          ],
          "returns": "boolean"
        }
      ]
    },
    "1629": {
      "name": "_emit",
      "type": "Method",
      "url": "/api/class/ObservableArray#emit",
      "flags": {
        "isPublic": true
      },
      "inheritedFrom": {
        "name": "_emit",
        "url": "/api/class/Observable#emit",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "_emit(eventNames: string): any",
          "url": "/api/class/ObservableArray#emit-emit-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 167,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "_emit",
            "url": "/api/class/Observable#emit",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "parameters": [
            {
              "name": "eventNames",
              "type": "string",
              "flags": {}
            }
          ],
          "returns": "any"
        }
      ]
    },
    "1632": {
      "name": "_createPropertyChangeData",
      "type": "Method",
      "url": "/api/class/ObservableArray#createpropertychangedata",
      "flags": {},
      "inheritedFrom": {
        "name": "_createPropertyChangeData",
        "url": "/api/class/Observable#createpropertychangedata",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "type": "CallSignature",
          "code": "_createPropertyChangeData(name: string, value: any, oldValue?: any): <a href=\"/api/interface/PropertyChangeData\">PropertyChangeData</a>",
          "url": "/api/class/ObservableArray#createpropertychangedata-createpropertychangedata-1",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 172,
              "character": 1
            }
          ],
          "inheritedFrom": {
            "name": "_createPropertyChangeData",
            "url": "/api/class/Observable#createpropertychangedata",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "This method is intended to be overriden by inheritors to provide additional implementation."
              }
            ]
          },
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "flags": {}
            },
            {
              "name": "value",
              "type": "any",
              "flags": {}
            },
            {
              "name": "oldValue",
              "type": "any",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "returns": "<a href=\"/api/interface/PropertyChangeData\">PropertyChangeData</a>"
        }
      ]
    },
    "1637": {
      "name": "_isViewBase",
      "type": "Property",
      "url": "/api/class/ObservableArray#isviewbase",
      "comment": {
        "summary": [
          {
            "kind": "text",
            "text": "Filed to use instead of instanceof ViewBase."
          }
        ]
      },
      "flags": {
        "isPrivate": true
      },
      "inheritedFrom": {
        "name": "_isViewBase",
        "url": "/api/class/Observable#isviewbase",
        "fromName": "Observable",
        "fromUrl": "/api/class/Observable"
      },
      "signatures": [
        {
          "code": "_isViewBase: boolean",
          "sources": [
            {
              "fileName": "@nativescript/core/data/observable/index.d.ts",
              "line": 179,
              "character": 8
            }
          ],
          "inheritedFrom": {
            "name": "_isViewBase",
            "url": "/api/class/Observable#isviewbase",
            "fromName": "Observable",
            "fromUrl": "/api/class/Observable"
          },
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Filed to use instead of instanceof ViewBase."
              }
            ]
          },
          "url": "/api/class/ObservableArray#isviewbase"
        }
      ]
    }
  }
}